{"version":3,"sources":["Components/TodoTemplate.js","Components/TodoInsert.js","Components/TodoListBox.js","Components/TodoList.js","App.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","className","TodoInsertBlock","TodoInsert","onInsert","useState","value","setValue","inputCS","useRef","onChange","useCallback","e","target","onSubmit","preventDefault","current","focus","type","placeholder","ref","TodoListBoxBlock","TodoListBox","todo","onRemove","onToggle","id","text","checked","cn","onClick","TodoListBlock","TodoList","todosp","map","App","todos","setTodos","nextid","filter","localStorage","JSON","stringify","ntext","concat","parse","useEffect","localNextId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ed30518.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst TodoTemplateBlock = styled.div`\nmax-width: 550px; margin: 70px auto;\n    .app-title {\n        background: #329f32; color: #fff;\n        height: 4rem; font-size: 1.5rem; \n        text-align: center; line-height: 4rem;\n    }\n    .content {\n        background: #fff;\n    }\n`;\n\nconst TodoTemplate = ({children}) => {\n    return (\n        <TodoTemplateBlock>\n            <h1 className=\"app-title\">Bin's Todo-list</h1>\n            <div className=\"content\">{children}</div>\n        </TodoTemplateBlock>\n    );\n};\n\nexport default TodoTemplate;","import React, { useState, useCallback, useRef} from 'react';\nimport {HiPlus} from 'react-icons/hi';\nimport styled from 'styled-components';\n\nconst TodoInsertBlock = styled.div`\n    .TodoInsert {\n        display: flex; background: #fcfcfc;\n        input {\n            padding: 7px 10px; font-size: 1.15rem; \n            background: rgba(50, 159, 50, 0.3);\n            line-height: 1.5; color: #555; flex: 1;\n            &::placeholder {color: #aaa;}\n        }\n        button {\n            color: #008000; font-size: 1.2rem; \n            background: rgba(50, 159, 50, 0.3);\n            display: flex; align-items: center; \n            cursor: pointer; padding: 0 10px; \n            font-weight: 800; transition: 0.5s;\n            &:hover {background: #008000c8; color: #fff;}\n        }\n    }\n`;\n\nconst TodoInsert = ({onInsert}) => {\n    const [value, setValue] = useState('')\n    const inputCS = useRef()    // 커서\n    const onChange = useCallback((e) => {setValue(e.target.value)},[value])   \n    // onChange이벤트가 발생하면 그 value값으로 value값이 변경됨.\n    const onSubmit = useCallback((e) => {\n        e.preventDefault(); \n        onInsert(value); \n        setValue('')\n        inputCS.current.focus()\n    }, \n        [value, onInsert])\n                                                        // 값이 입력되고 나서의 값.\n\n    return (\n       <TodoInsertBlock>\n            <form className=\"TodoInsert\" onSubmit={onSubmit}>\n                <input type=\"text\" placeholder=\"할 일을 입력하세요.\" value={value} onChange={onChange} ref={inputCS}/>\n                <button type=\"submit\">  \n                    <HiPlus />\n                </button>\n            </form>\n       </TodoInsertBlock>\n    );\n};\n\nexport default TodoInsert;","import React from 'react';\nimport {MdCheckBoxOutlineBlank, MdOutlineIndeterminateCheckBox, MdCheckBox} from 'react-icons/md'\nimport cn from 'classnames';\nimport styled from 'styled-components';\n\nconst TodoListBoxBlock = styled.div`\n    display: flex; padding: 1rem; \n    font-size: 17px;\n    & + .TodoListBox {\n        border-top: 1px solid rgba(190, 211, 190, 0.507)\n    }\n    &:nth-child(2n) {background: #f5f5f5b4;}\n    .check {\n        flex: 1; display: flex; \n        align-items: center; cursor: pointer;\n    }\n    .text {\n        margin-left: 0.5rem; flex: 1;\n        &.checked {text-decoration: line-through; color: green}\n    }\n    .remove {\n        color: rgba(255, 0, 0, 0.5); cursor: pointer; \n        font-size: 19px; align-items: center; \n        transition: 0.5s;\n        &:hover {color: rgba(255, 0, 0, 1)}\n    }\n\n`;\n\nconst TodoListBox = ({todo, onRemove, onToggle}) => {\n    const {id, text, checked} = todo\n    return (\n        <TodoListBoxBlock>\n            <div className={cn('check', {checked})} onClick={() => onToggle(id)}>\n                {checked ? <MdCheckBox className=\"green\" /> : <MdCheckBoxOutlineBlank />}\n                <div className={cn(\"text\",{checked})}>{text}</div>\n            </div>\n            <div className=\"remove\" onClick={() => onRemove(id)}>\n                <MdOutlineIndeterminateCheckBox />\n            </div>\n        </TodoListBoxBlock>\n    );\n};\n\nexport default TodoListBox;","import React from 'react';\nimport TodoListBox from './TodoListBox';\nimport styled from 'styled-components';\n\nconst TodoListBlock = styled.div`\n    min-height: 360px; max-height: 520px; \n    overflow-y: auto;\n`;\n\nconst TodoList = ({todosp, onRemove, onToggle}) => {\n    return (\n        <TodoListBlock>\n            {\n             todosp.map( (todo) => <TodoListBox key={todo.id} todo={todo} onRemove={onRemove} onToggle={onToggle} /> )\n            }\n        </TodoListBlock>\n    );\n};\n\nexport default TodoList;","import React, { useState, useCallback, useRef, useEffect} from 'react';\n// import './App.css';\nimport TodoTemplate from './Components/TodoTemplate';\nimport TodoInsert from './Components/TodoInsert';\nimport TodoList from './Components/TodoList';\n// import { MdNavigateNext } from 'react-icons/md'; ㄴ\n\nconst App = () => {\n  const [todos, setTodos]= useState([\n    // {id: 1, text: \"일정관리1\", checked: true},\n    // {id: 2, text: \"일정관리2\", checked: true},\n    // {id: 3, text: \"일정관리3\", checked: false}\n  ]);\n  const nextid = useRef(1)  // 전역변수를 선언하기 위해 사용하는 useRef\n  // const onRemove = (id) => { setTodos(todos.filter( todo => todo.id !== id)) }\n  // const onToggle = (id) => { setTodos(todos.map( todo => todo.id === id ? {...todo, checked:!todo.checked} : todo))}\n  // 위에껄 useCallback을 사용하여 바꾸기.\n\n  const onRemove = useCallback((id) => {\n    setTodos(todos.filter( todo => todo.id !== id))\n    localStorage.todo = JSON.stringify(todos.filter( todo => todo.id !== id))\n  }, [todos])\n\n  const onToggle = useCallback((id) => {setTodos(todos.map( todo => todo.id === id ? {...todo, checked:!todo.checked} : todo))\n    localStorage.todo = JSON.stringify(todos.map( todo => todo.id === id ? {...todo, checked:!todo.checked} : todo))\n  },[todos])\n  \n  const onInsert = useCallback(\n      (ntext) => {       //새로 입력된 text (value값.)\n        const todo = {id: nextid.current, text: ntext, checked: false}   //초기 id는 4로 \n        nextid.current = nextid.current +1      // 나오면서는 id를 1씩 증가 시켜라.\n        setTodos(todos.concat(todo))   // 기존 배열에 연결\n        localStorage.todo = JSON.stringify(todos.concat(todo))\n        localStorage.nextid = JSON.parse(nextid.current)\n      },[todos])\n    \n  useEffect(     // 새로고침했을때 값 저장되어있도록 하려면.\n    () => {\n      const todo = localStorage.todo\n      const localNextId = localStorage.nextid\n        if (todo) {\n          setTodos(todos.concat(JSON.parse(todo)))\n          nextid.current = JSON.parse(localNextId)     // nextid.current는 전역변수 useRef로 선언해놓은 nextid를 칭함.\n        }\n      }\n      ,[])\n\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList todosp={todos} onRemove={onRemove} onToggle={onToggle} />\n    </TodoTemplate>\n  );\n};\n\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}